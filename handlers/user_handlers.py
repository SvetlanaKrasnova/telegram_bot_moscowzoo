import os
import logging
from aiogram.types import Message
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.filters import CommandStart
from keyboards.inline import MenuCallBack
from handlers.processing import plus_points, show_result, get_get_main_menu, questions_page, program, contacts
from database.orm_requests import *

user_router = Router()


class Menu(StatesGroup):
    get_feedback = State()  # –ü–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å


@user_router.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ /start
    :param message:
    :return:
    """
    text, reply_markup, image = await get_get_main_menu(message.from_user.full_name)
    if image:
        await message.answer_photo(image, caption=text, reply_markup=reply_markup)
    else:
        await message.answer(text, reply_markup=reply_markup)

@user_router.callback_query(MenuCallBack.filter(F.menu_name == "restart"))
async def restart_page(callback: types.CallbackQuery, state: FSMContext) -> None:
    """
    –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ
    :param message:
    :return:
    """
    await state.clear()
    text, reply_markup, image = await get_get_main_menu(callback.message.from_user.full_name)
    await callback.message.delete()
    if image:
        await callback.message.answer_photo(image, caption=text, reply_markup=reply_markup)
    else:
        await callback.message.answer(text, reply_markup=reply_markup)


@user_router.callback_query(MenuCallBack.filter(F.menu_name == "quiz"))
async def quiz_page(callback: types.CallbackQuery,
                    callback_data: MenuCallBack,
                    session: AsyncSession,
                    state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã. –¢—É—Ç –±—É–¥–µ–º –ø–æ–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ
    :param callback:
    :param callback_data:
    :param session:
    :param state:
    :return:
    """
    # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –∂–∏–≤–æ—Ç–Ω—ã–º (–ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞)
    await plus_points(session=session,
                      state=state,
                      user_select=callback_data.user_select,
                      question_id=callback_data.question_id)

    text, reply_markup = await questions_page(session=session,
                                              question_id=callback_data.question_id,
                                              state=state)
    if callback_data.question_id == 0:
        await callback.message.delete()
        await callback.message.answer(text=text, reply_markup=reply_markup)
    else:
        await callback.message.edit_text(text=text, reply_markup=reply_markup)


@user_router.callback_query(MenuCallBack.filter(F.menu_name == "show_result"))
async def show_result_page(callback: types.CallbackQuery, state: FSMContext):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    :param callback:
    :param callback_data:
    :param session:
    :param state:
    :return:
    """
    text, reply_markup, image = await show_result(state=state)
    if image:
        await callback.message.delete()
        await callback.message.answer_photo(image, caption=text, reply_markup=reply_markup)
    else:
        await callback.message.edit_text(text=text, reply_markup=reply_markup)


@user_router.callback_query(MenuCallBack.filter(F.menu_name == "program"))
async def about_program_page(callback: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏
    :param message:
    :param state:
    :return:
    """
    text, reply_markup = await program()

    await callback.message.delete()
    await callback.message.answer(**text.as_kwargs(), reply_markup=reply_markup)


@user_router.callback_query(MenuCallBack.filter(F.menu_name == "feedback"))
async def feedback_page(message: Message, state: FSMContext):
    """
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–≤–µ—Å—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ—Ç–∑—ã–≤)
    :param message:
    :param state:
    :return:
    """
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ üòä:')
    await state.set_state(Menu.get_feedback.state)


@user_router.message(Menu.get_feedback)
async def write_feedback(message: Message, state: FSMContext, session: AsyncSession):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ—Ç–∑—ã–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    :param message:
    :param state:
    :return:
    """
    await insert_one(session=session,
                     data=ReviewORM(user=message.from_user.full_name,
                                    review=str(message.text.strip())))
    await message.answer('–°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω üôÇ')
    await state.clear()


@user_router.callback_query(MenuCallBack.filter(F.menu_name == "manager_contact"))
async def contact_page(callback: types.CallbackQuery):
    """
    –°–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    :param message:
    :param state:
    :return:
    """
    text, reply_markup = await contacts()
    try:
        if os.getenv('MANAGER_TELEGRAM_ID'):
            await callback.message.copy_to(chat_id=int(os.getenv('MANAGER_TELEGRAM_ID')))
    except Exception as e:
        logging.exception(e)
        logging.warning('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É')

    await callback.message.delete()
    await callback.message.answer(text=text, reply_markup=reply_markup)


@user_router.callback_query(MenuCallBack.filter())
async def user_menu(callback: types.CallbackQuery):
    """
    –ß—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ (–≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –∫–∞—Ä—Ç–∏–Ω–∫–∞...)
    :param callback:
    :param callback_data:
    :param session:
    :return:
    """
    await callback.message.answer(text='–ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å :( '
                                       '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—å–∑—É–π—Å —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ'
                                       '—è —Ç–µ–±–µ –ø—Ä–µ–¥–ª–∞–≥–∞—è.')
