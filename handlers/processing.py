import os
import json
import random
from typing import Optional
from aiogram.types import BufferedInputFile
from aiogram.fsm.context import FSMContext
from keyboards.inline import get_user_main_btns, get_user_question_btns, get_result_btns, get_program_btns
from database.orm_requests import *


async def get_get_main_menu(full_name):
    text = f"–ü—Ä–∏–≤–µ—Ç, {full_name} ü§ó!\n–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å—è)\n" \
           "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–µ–±–µ –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É \"–ö–∞–∫–æ–µ —É –≤–∞—Å —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ\"\n" \
           "–ê –ø–æ—Ç–æ–º —è —Ç–µ–±–µ –∫–æ–µ-—á—Ç–æ —Ä–∞—Å—Å–∫–∞–∂—Éüòâ.\n\n" \
           "–ñ–¥—É —Ç–µ–±—è –Ω–∞ —Ñ–∏–Ω–∏—à–µ!‚ù§Ô∏è"

    kbds = get_user_main_btns()

    with open(os.path.join(os.getcwd(), "files/image_start.png"), "rb") as image_from_buffer:
        image = BufferedInputFile(image_from_buffer.read(),
                                  filename="image_start.png")

    return text, kbds, image


async def questions_page(session: AsyncSession, question_id, state=None):
    data = await state.get_data()
    questions_id = data.get('questions_id')

    if not questions_id:
        # –ï—Å–ª–∏ –µ—â—ë –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ - –∑–Ω–∞—á–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–∏
        all_questions = await get_questions(session)

        # –¢–µ–ø–µ—Ä—å –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ, —á—Ç–æ–± –±—ã–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ (–µ—Å–ª–∏, –∫–æ–Ω–µ—á–Ω–æ –≤ –±–∞–∑–µ –∏—Ö –±–æ–ª—å—à–µ, —á–µ–º –Ω—É–∂–Ω–æ)
        if all_questions.__len__() == int(os.getenv('COL_QUESTIONS')):
            questions = all_questions
        else:
            questions = random.sample(all_questions, int(os.getenv('COL_QUESTIONS')))

        questions_id = [q.id for q in questions]
        await state.set_data({'weights': {}, 'questions_id': questions_id})

    question = await get_question(session, questions_id[question_id])
    text = f'{question_id + 1}/{os.getenv("COL_QUESTIONS")} {question.question}'  # –¢—É—Ç –≤–æ–ø—Ä–æ—Å –∏–∑ –±–∞–∑—ã
    menu_main = None

    # –ö–Ω–æ–ø–ò –ù—É–∂–Ω–æ –≤–∑—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã
    if question_id + 1 == int(os.getenv('COL_QUESTIONS')):
        # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å:
        # –ü–æ–º–µ–Ω—è—Ç—å level –Ω–∞ –º–µ–Ω—é —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        menu_main = 'show_result'

    kbds = get_user_question_btns(question_id=question_id,
                                  question=question,
                                  menu_main=menu_main)

    return text, kbds


async def plus_points(state: FSMContext, session: AsyncSession, user_select: int, question_id: int = 0):
    """
    –ú–µ—Ç–æ–¥ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –±–∞–ª–ª—ã —Ç–µ–∫—É—â–µ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    :param state:
    :param session:
    :param user_select: –ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    :param question_id: –¢–µ–∫—É—â–∏–π id –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –ë–î, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –≤—ã–±—Ä–∞–Ω –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    :return:
    """
    data = await state.get_data()
    questions_id = data.get('questions_id')
    if questions_id:
        # –ï—Å–ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É–∂–µ –∏–¥–µ—Ç
        question = await get_question(session, questions_id[question_id - 1])
        answer = list(json.loads(question.answer).values())[user_select]
        for v in answer:
            if not v in data['weights']:
                data['weights'][v] = 1
            else:
                data['weights'][v] += 1

        await state.update_data({'weights': data['weights']})


async def show_result(state: FSMContext):
    data = await state.get_data()
    max_value, result = 0, ''
    for k, v in data['weights'].items():
        if max_value < v:
            max_value, result = v, k

    path_file, image = None, None
    text = f'–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: "{result}"\n–ü–æ—Å–º–æ—Ç—Ä–∏ –∫–∞–∫–æ–π —Ö–æ—Ä–æ—à–µ–Ω—å–∫–∏–π –∑–≤–µ—Ä—ë–∫!üòä'
    dir_foto = os.path.join(os.getcwd(), f"modul_quiz/foto")
    for _f in os.listdir(dir_foto):
        if _f.lower().strip().__contains__(result.lower().strip()):
            path_file = os.path.join(dir_foto, _f)
            break
    if path_file:
        with open(path_file, "rb") as image_from_buffer:
            image = BufferedInputFile(image_from_buffer.read(), filename=f"{result}")

    kbds = get_result_btns()

    return text, kbds, image


async def program():
    """
    –û –ø—Ä–æ–≥—Ä–∞–º–µ –æ–ø–µ–∫–∏
    :return:
    """
    text = """
    –í–æ–∑—å–º–∏—Ç–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –ø–æ–¥ –æ–ø–µ–∫—É!\n\n

    –û–ø–µ–∫–∞ –Ω–∞–¥ –∂–∏–≤–æ—Ç–Ω—ã–º –∏–∑ –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—Ç—å –±–∏–æ—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è 
    –ó–µ–º–ª–∏ –∏, –∫–æ–Ω–µ—á–Ω–æ, **—ç—Ç–æ —Ä–µ–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å –∂–∏–≤–æ—Ç–Ω—ã–º –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞!**
    –ë–ª–∞–≥–æ–¥–∞—Ä—è –≤–∞–º –º—ã –º–æ–∂–µ–º —É–ª—É—á—à–∏—Ç—å —É—Å–ª–æ–≤–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –Ω–∞—à–∏—Ö –æ–±–∏—Ç–∞—Ç–µ–ª–µ–π.
    –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –∂–∏–∑–Ω–∏ –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞, –ø–æ—á—É–≤—Å—Ç–≤—É–π—Ç–µ –ø—Ä–∏—á–∞—Å—Ç–Ω–æ—Å—Ç—å –∫ –¥–µ–ª—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏—Ä–æ–¥—ã. 
    –°—Ç–∞–Ω—Ç–µ –æ–ø–µ–∫—É–Ω–æ–º –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –ª—é–±–æ–≤—å—é –∏ –∑–∞–±–æ—Ç–æ–π —Å–æ —Å–≤–æ–∏–º –ø–æ–¥–æ–ø–µ—á–Ω—ã–º
    
    –û–ø–µ–∫–∞—Ç—å ‚Äì –∑–Ω–∞—á–∏—Ç –ø–æ–º–æ–≥–∞—Ç—å –ª—é–±–∏–º—ã–º –∂–∏–≤–æ—Ç–Ω—ã–º.
        """
    kbds = get_program_btns()

    return text, kbds


async def get_menu_content(
        menu_name: str,
        session: AsyncSession = None,
        question_id: Optional[int] = None,
        state=None):
    if menu_name == 'program':
        # –û –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏ (—Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ"
        return await program()
    elif menu_name == 'not_quiz':
        # –¢–æ–∂–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏, –Ω–æ –ø–æ–º–µ–Ω—è—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        pass
