import json
from typing import Optional
from pydantic import Field
from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder


class MenuCallBack(CallbackData, prefix="menu"):
    menu_name: str
    user_select: Optional[int] = Field(default=0)
    question_id: Optional[int] = 0  # —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ questions —Å –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–±–æ—Ç–∞–µ–º


def get_user_main_btns():
    """
    –≠—Ç–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–∞–º–æ–π —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    :param level:
    :return:
    """
    keyboard = InlineKeyboardBuilder()
    btns = {
        "–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É ü¶Å": "quiz",
        "–í –¥—Ä—É–≥–æ–π —Ä–∞–∑ üê•": "not_quiz"
    }
    for text, menu_name in btns.items():
        keyboard.add(InlineKeyboardButton(text=text,
                                          callback_data=MenuCallBack(menu_name=menu_name).pack()))

    return keyboard.adjust(*(1,)).as_markup()


def get_user_question_btns(question_id: int, question, menu_main=None):
    """
    –ö–Ω–æ–ø–∫–∏ - –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å (–¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã)
    :param question: –≤–æ–ø—Ä–æ—Å –∏–∑ –ë–î
    :return:
    """
    keyboard = InlineKeyboardBuilder()
    for i, k in enumerate(list(json.loads(question.answer).keys())):
        keyboard.add(InlineKeyboardButton(text=k,
                                          callback_data=MenuCallBack(user_select=i,
                                                                     menu_name=menu_main if menu_main else 'quiz',
                                                                     question_id=question_id + 1).pack()))

    return keyboard.adjust(*(1,)).as_markup()


def get_result_btns():
    """
    –ö–Ω–æ–ø–∫–∏ - –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    :return:
    """
    keyboard = InlineKeyboardBuilder()
    btns = {
        "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑? üôÇ": "quiz",  # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–ø–µ–∫–∏ ü¶ã": "program",
        "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤": "feedback",  # –ú–µ—Ö–∞–Ω–∏–∑–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º": "send_result",  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
        "–°–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º": "manager_contact",  # –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º
    }
    for text, menu_name in btns.items():
        keyboard.add(InlineKeyboardButton(text=text,
                                          callback_data=MenuCallBack(menu_name=menu_name).pack()))

    return keyboard.adjust(*(1,)).as_markup()


def get_program_btns():
    """
    –ö–Ω–æ–ø–∫–∏ - –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–µ–∫–∏
    :return:
    """
    keyboard = InlineKeyboardBuilder()
    btns = {
        "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑? üôÇ": "quiz",
        "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤": "feedback",
        "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º": "send_result",
        "–°–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º": "manager_contact",
    }
    for text, menu_name in btns.items():
        keyboard.add(InlineKeyboardButton(text=text,
                                          callback_data=MenuCallBack(menu_name=menu_name).pack()))

    return keyboard.adjust(*(1,)).as_markup()
